--- soc/riscv/riscv-privilege/common/vector.S
+++ soc/riscv/riscv-privilege/common/vector.S
@@ -25,5 +26,73 @@ SECTION_FUNC(vectors, __start)
 	la t0, __irq_wrapper
 	csrw mtvec, t0
 
+#if defined(CONFIG_SMP) || (CONFIG_MP_NUM_CPUS > 1)
+	csrr t0, mhartid
+	bnez t0, secondary_cpu
+#else
+	/*
+	 * If the platform has more than 1 CPU but running Zephyr UP kernel,
+	 * other CPUs should goto infinite loop.
+	 */
+
+	csrr t0, mhartid
+	bnez t0, cpu_loop_infinite
+#endif
+
 	/* Jump to __initialize */
 	tail __initialize
+
+#if defined(CONFIG_SMP) || (CONFIG_MP_NUM_CPUS > 1)
+secondary_cpu:
+	/*
+	 * The Zephyr SMP kernel is configured to support N CPUs platform
+	 * (N=CONFIG_MP_NUM_CPUS). If the platform has more CPUs than configured,
+	 * these CPUs should goto infinite loop. (mhartid >= CONFIG_MP_NUM_CPUS)
+	 */
+
+	addi t2, t0, (-1 * CONFIG_MP_NUM_CPUS)
+	bgez t2, cpu_loop_infinite
+#endif
+
+#if defined(CONFIG_SMP) || (CONFIG_MP_NUM_CPUS > 1)
+secondary_cpu_start:
+	/* Disable interrupt before this mhart sets stack pointer, because kernel
+	 * will reuse interrupt stack as system stack during kernel init. */
+	csrc mstatus, MSTATUS_IEN
+
+#if defined(CONFIG_SCHED_IPI_SUPPORTED)
+	/*
+	 * cpu_init_boot_flag haven't been initialized at start in the XIP mode.
+	 * Wait until CPU0 sends boot IPI.
+	 */
+	csrs mie, (1 << RISCV_MACHINE_SOFT_IRQ)
+	wfi
+	csrc mie, (1 << RISCV_MACHINE_SOFT_IRQ)
+#endif
+
+	/* t1 = cpu_init_boot_flag[mhartid] */
+	la t1, cpu_init_boot_flag
+	slli t2, t0, 2
+	add t1, t1, t2
+
+secondary_cpu_wait:
+	/* Wait until CPU0 set cpu_init_boot_flag[mhartid] by z_arch_start_cpu() */
+	lw t2, 0(t1)
+	beqz t2, secondary_cpu_wait
+
+	/* t1 = cpu_init_stack[mhartid] */
+	la t1, cpu_init_stack
+	slli t2, t0, RV_REGSHIFT
+	add t1, t1, t2
+
+	/* Initialize stack by cpu_init_stack[mhartid] */
+	RV_OP_LOADREG sp, 0(t1)
+
+	/* Set 1st argument of secondary_cstart(): mhartid */
+	mv a0, t0
+
+	j secondary_cstart
+#endif /* defined(CONFIG_SMP) || (CONFIG_MP_NUM_CPUS > 1) */
+
+cpu_loop_infinite:
+	j cpu_loop_infinite
